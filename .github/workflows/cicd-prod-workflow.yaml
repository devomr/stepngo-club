name: "CI/CD Pipeline (main)"

on:
  push:
    branches:
      - main

env:
  # Google Cloud secrets
  GC_PROJECT_ID: "${{ secrets.PROD_GC_PROJECT_ID }}"
  GC_PROJECT_NUMBER: "${{ secrets.PROD_GC_PROJECT_NUMBER }}"

jobs:
  terraform:
    # Add "id-token" with the intended permissions.
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    name: Terraform Infrastructure
    runs-on: ubuntu-latest
    env:
      # Terraform required variables
      TF_VAR_gc_project_id: "${{ secrets.PROD_GC_PROJECT_ID }}"
      TF_VAR_gc_project_name: "${{ vars.PROD_GC_PROJECT_NAME }}"
      TF_VAR_gc_billing_account_id: "${{ secrets.PROD_GC_BILLING_ACCOUNT_ID }}"
      TF_VAR_fb_database_location: "${{ secrets.PROD_FB_DATABASE_LOCATION }}"
      TF_VAR_fb_storage_location: "${{ secrets.PROD_FB_STORAGE_LOCATION }}"
      TF_VAR_fb_web_app_name: "${{ vars.PROD_FB_WEB_APP_NAME }}"
      TF_VAR_gh_repository_name: "${{ vars.GH_REPOSITORY_NAME }}"

    defaults:
      run:
        working-directory: ./infrastructure # relative path under which your terraform codes is located

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          create_credentials_file: "true"
          workload_identity_provider: "projects/${{ env.GC_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github/providers/github-provider"
          service_account: "github-actions@${{ env.GC_PROJECT_ID }}.iam.gserviceaccount.com"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.4

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ env.GC_PROJECT_ID }}-terraform" -backend-config="prefix=state"

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

  buildAndDeploy:
    # Add "id-token" with the intended permissions.
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: terraform
    env:
      # Workaround for firebase-tools to take the correct configuration when deploy
      FIREBASE_FRAMEWORKS_BUILD_TARGET: production

      # Firebase required variables
      FIREBASE_CONFIG: "${{ secrets.PROD_FIREBASE_CONFIG }}"
      FIREBASE_FUNCTIONS_DEPLOYMENT_REGION: "${{ secrets.PROD_FB_FUNCTIONS_DEPLOYMENT_REGION }}"

      # Application variables
      APP_NAME: "${{ vars.APP_NAME }}"
      APP_DOMAIN_URL: "${{ vars.PROD_APP_DOMAIN_URL }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          create_credentials_file: "true"
          workload_identity_provider: "projects/${{ env.GC_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github/providers/github-provider"
          service_account: "github-actions@${{ env.GC_PROJECT_ID }}.iam.gserviceaccount.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Angular app dependencies
        run: |
          npm install
          npm install -g firebase-tools

      - name: Create .env file for Cloud Functions
        run: |
          cd functions
          touch .env.prod
          echo "FB_FUNCTIONS_DEPLOYMENT_REGION=${{ env.FIREBASE_FUNCTIONS_DEPLOYMENT_REGION }}" >> .env.prod
          cd ..

      - name: Install Cloud Functions dependencies
        run: |
          cd functions
          npm install
          cd ..

      - name: Run Angular prebuild
        run: npm run prebuild:prod

      - name: Deploy to Firebase
        run: |
          firebase use prod
          firebase experiments:enable webframeworks
          firebase deploy --non-interactive -m "Deploy new version"
